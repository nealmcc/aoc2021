package main

import (
	"fmt"
	"strings"
	"testing"

	"github.com/nealmcc/aoc2021/pkg/vector"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// 512 = 2 ^ 8 bits = 8 * 64 bits for the 'algorithm'
var examples = []struct {
	name string
	in   string
	alg  algorithm
	img  image
}{
	{
		name: "example 1",
		in: `

#..#.
#....
##..#
..#..
..###
`,
		alg: algorithm{
			0b_0010100111110101010111011000001110110100111011110011111001000010,
			0b_0100110011100111111011100011110010011111001100101111100011010100,
			0b_1011001010000001011101111110111011110001011011001001001111100000,
			0b_1010000111001011000000100000100100100110010001101111110111101111,
			0b_0101000100000001001010100011110110100000010010001101011001000110,
			0b_1011001110100000010100000001010101111011101100010000011110100100,
			0b_1011010000110010111100001100011001000100000010100000001000000011,
			0b_0011110010001010100011001010011100111110000000010011110000001001,
		},
		img: image{
			size: 5,
			pixels: map[vector.Coord]px{
				{X: 0, Y: 0}: px(true), {X: 3, Y: 0}: px(true),
				{X: 0, Y: 1}: px(true),
				{X: 0, Y: 2}: px(true), {X: 1, Y: 2}: px(true), {X: 4, Y: 2}: px(true),
				{X: 2, Y: 3}: px(true),
				{X: 2, Y: 4}: px(true), {X: 3, Y: 4}: px(true), {X: 4, Y: 4}: px(true),
			},
		},
	},
}

func TestRead(t *testing.T) {
	for _, tc := range examples {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			r, a := require.New(t), assert.New(t)
			alg, img, err := read(strings.NewReader(tc.in))
			r.NoError(err)

			a.Equal(&tc.alg, alg)
			a.Equal(fmt.Sprintf("%v", tc.img), fmt.Sprintf("%v", *img))
		})
	}
}
